// Choose the mode that zellij uses when starting up.
// Default: normal
//
default_mode "locked"

// The name of the default layout to load on startup
// Default: "default"
// (Requires restart)
//
default_layout "compact"

// If you'd like to override the default keybindings completely, be sure to change "keybinds" to "keybinds clear-defaults=true"
keybinds clear-defaults=true {
    locked {
        bind "Ctrl t" {
          SwitchToMode "Normal"
        }
    }
    normal {
        //
        // Search / Scrollback
        //

        bind "[" { SwitchToMode "Search"; }

        bind "Ctrl y" {
            EditScrollback
            SwitchToMode "Locked"
        }

        //
        // Open session manager
        //

        bind "Ctrl f" {
            SwitchToMode "Session"
            LaunchOrFocusPlugin "session-manager" {
                floating true
                move_to_focused_tab true
            }
            SwitchToMode "Locked"
        }

        //
        // Detach session
        //

        bind "d" {
            SwitchToMode "Session"
            Detach
        }

        //
        // Toggle floating panes
        //

        bind "Ctrl Space" {
          SwitchToMode "Pane"
          ToggleFloatingPanes
          SwitchToMode "Locked"
        }

        //
        // Toggle full screen
        //

        bind "Ctrl t" {
          SwitchToMode "Pane"
          ToggleFocusFullscreen
          SwitchToMode "Locked"
        }

        //
        // Sync cursor across panes
        //

        bind "Ctrl c" {
          SwitchToMode "Pane"
          ToggleActiveSyncTab
          SwitchToMode "Locked"
        }

        //
        // Switch focused pane
        //

        bind "Ctrl h" {
            SwitchToMode "Pane"
            MoveFocus "Left"
            SwitchToMode "Locked"
        }
        bind "Ctrl l" {
            SwitchToMode "Pane"
            MoveFocus "Right"
            SwitchToMode "Locked"
        }
        bind "Ctrl j" {
            SwitchToMode "Pane"
            MoveFocus "Down"
            SwitchToMode "Locked"
        }
        bind "Ctrl k" {
            SwitchToMode "Pane"
            MoveFocus "Up"
            SwitchToMode "Locked"
        }

        //
        // Move pane
        //

        bind "Left" {
            SwitchToMode "Move"
            MovePane "Left"
            SwitchToMode "Locked"
        }
        bind "Down" {
            SwitchToMode "Move"
            MovePane "Down"
            SwitchToMode "Locked"
        }
        bind "Up" {
            SwitchToMode "Move"
            MovePane "Up"
            SwitchToMode "Locked"
        }
        bind "Right" {
            SwitchToMode "Move"
            MovePane "Right"
            SwitchToMode "Locked"
        }

        //
        // Resize pane
        //

        bind "Left" {
            SwitchToMode "Pane"
            Resize "Increase Left"
            SwitchToMode "Locked"
        }
        bind "Down" {
            SwitchToMode "Pane"
            Resize "Increase Down"
            SwitchToMode "Locked"
        }
        bind "Up" {
            SwitchToMode "Pane"
            Resize "Increase Up"
            SwitchToMode "Locked"
        }
        bind "Right" {
            SwitchToMode "Pane"
            Resize "Increase Right"
            SwitchToMode "Locked"
        }
        bind "+" {
            SwitchToMode "Pane"
            Resize "Increase"
            SwitchToMode "Locked"
        }
        bind "-" {
            SwitchToMode "Pane"
            Resize "Decrease"
            SwitchToMode "Locked"
        }

        //
        // Create pane
        //

        bind "Ctrl v" {
            SwitchToMode "Pane"
            NewPane "Right"
            SwitchToMode "Locked"
        }
        bind "Ctrl s" {
            SwitchToMode "Pane"
            NewPane "Down"
            SwitchToMode "Locked"
        }
        bind "n" { SwitchToMode "RenamePane"; }

        //
        // Switch tab
        //

        bind "Ctrl n" {
            SwitchToMode "Tab"
            GoToNextTab
            SwitchToMode "Locked"
        }
        bind "Ctrl p" {
            SwitchToMode "Tab"
            GoToPreviousTab
            SwitchToMode "Locked"
        }
        bind "1" {
            SwitchToMode "Tab"
            GoToTab 1
            SwitchToMode "Locked"
        }
        bind "2" {
            SwitchToMode "Tab"
            GoToTab 2
            SwitchToMode "Locked"
        }
        bind "3" {
            SwitchToMode "Tab"
            GoToTab 3
            SwitchToMode "Locked"
        }
        bind "4" {
            SwitchToMode "Tab"
            GoToTab 4
            SwitchToMode "Locked"
        }
        bind "5" {
            SwitchToMode "Tab"
            GoToTab 5
            SwitchToMode "Locked"
        }
        bind "6" {
            SwitchToMode "Tab"
            GoToTab 6
            SwitchToMode "Locked"
        }
        bind "7" {
            SwitchToMode "Tab"
            GoToTab 7
            SwitchToMode "Locked"
        }
        bind "8" {
            SwitchToMode "Tab"
            GoToTab 8
            SwitchToMode "Locked"
        }
        bind "9" {
            SwitchToMode "Tab"
            GoToTab 9
            SwitchToMode "Locked"
        }

        //
        // Create tab
        //

        bind "Ctrl o" {
            SwitchToMode "Pane"
            NewTab
            SwitchToMode "Locked"
        }
        bind "N" { SwitchToMode "RenameTab"; }

        //
        // Close tab
        //

        bind "Ctrl q" {
            CloseTab
            SwitchToMode "Locked"
        }
    }
    renametab {
        bind "Enter" { SwitchToMode "Locked"; }
        bind "Esc" {
          UndoRenameTab
          SwitchToMode "Locked";
        }
    }
    renamepane {
        bind "Enter" { SwitchToMode "Locked"; }
        bind "Esc" {
          UndoRenamePane
          SwitchToMode "Locked"
        }
    }
    search {
        bind "Ctrl c" { ScrollToBottom; SwitchToMode "Locked"; }
        bind "j" "Down" { ScrollDown; }
        bind "k" "Up" { ScrollUp; }
        bind "Ctrl f" "PageDown" "Right" "l" { PageScrollDown; }
        bind "Ctrl b" "PageUp" "Left" "h" { PageScrollUp; }
        bind "d" { HalfPageScrollDown; }
        bind "u" { HalfPageScrollUp; }
        bind "n" { Search "down"; }
        bind "p" { Search "up"; }
        //bind "/" { Search "down"; }
        //bind "?" { Search "up"; }
        bind "c" { SearchToggleOption "CaseSensitivity"; }
        bind "w" { SearchToggleOption "Wrap"; }
        bind "o" { SearchToggleOption "WholeWord"; }
    }
}

// Plugin aliases - can be used to change the implementation of Zellij
// changing these requires a restart to take effect
plugins {
    tab-bar location="zellij:tab-bar"
    strider location="zellij:strider"
    session-manager location="zellij:session-manager"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }
    filepicker location="zellij:strider" {
        cwd "/"
    }
    configuration location="zellij:configuration"
    plugin-manager location="zellij:plugin-manager"
}

// Plugins to load in the background when a new session starts
load_plugins {
  // "file:/path/to/my-plugin.wasm"
  // "https://example.com/my-plugin.wasm"
}

// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// (Requires restart)
// Options:
//   - detach (Default)
//   - quit
//
// on_force_close "quit"

//  Send a request for a simplified ui (without arrow fonts) to plugins
//  Options:
//    - true
//    - false (Default)
//
// simplified_ui true

// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
//
// default_shell "fish"

// Choose the path to override cwd that zellij will use for opening new panes
//
// default_cwd ""

// Toggle between having pane frames around the panes
// Options:
//   - true (default)
//   - false
//
// pane_frames true

// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
//
// auto_layout true

// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// (Requires restart)
// Options:
//   - true (default)
//   - false
//
// session_serialization false

// Whether pane viewports are serialized along with the session, default is false
// (Requires restart)
// Options:
//   - true
//   - false (default)
//
// serialize_pane_viewport true

// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
// (Requires restart)
//
// scrollback_lines_to_serialize 10000

// Define color themes for Zellij
// For more examples, see: https://github.com/zellij-org/zellij/tree/main/example/themes
// Once these themes are defined, one of them should to be selected in the "theme" section of this file
//
// themes {
//     dracula {
//         fg 248 248 242
//         bg 40 42 54
//         red 255 85 85
//         green 80 250 123
//         yellow 241 250 140
//         blue 98 114 164
//         magenta 255 121 198
//         orange 255 184 108
//         cyan 139 233 253
//         black 0 0 0
//         white 255 255 255
//     }
// }

// Choose the theme that is specified in the themes section.
// Default: default
//
// theme "default"

// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// (Requires restart)
// Options:
//   - true (default)
//   - false
//
// mouse_mode false

// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// (Requires restart)
// Valid values: positive integers
// Default value: 10000
//
// scroll_buffer_size 10000

// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx

// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
//
// copy_clipboard "primary"

// Enable or disable automatic copy (and clear) of selection when releasing mouse
// Default: true
//
// copy_on_select false

// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
//
// scrollback_editor "/usr/bin/vim"

// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// (Requires restart)
// Default: false
//
// mirror_session true

// The folder in which Zellij will look for layouts
// (Requires restart)
//
// layout_dir "/path/to/my/layout_dir"

// The folder in which Zellij will look for themes
// (Requires restart)
//
// theme_dir "/path/to/my/theme_dir"

// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// (Requires restart)
// Default: true
//
// styled_underlines false

// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// (Requires restart)
// Default: false
//
// disable_session_metadata true

// Enable or disable support for the enhanced Kitty Keyboard Protocol (the host terminal must also support it)
// (Requires restart)
// Default: true (if the host terminal supports it)
//
// support_kitty_keyboard_protocol false
